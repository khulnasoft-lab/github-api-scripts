{
  "message": "Add a codeql workflow file to report zipslip bug",
  "committer": {
    "name": "mona",
    "email": "mona@example.com"
  },
  "content": "" }

